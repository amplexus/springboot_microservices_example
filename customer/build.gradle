apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'maven'
apply plugin: 'com.bmuschko.vagrant-base'
// apply plugin: 'com.bmuschko.vagrant' // the "convention" plugin - use this if you only have one vm to manage
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'os-package'

group = 'org.amplexus.springboot.demo'
version = customerVersion

buildscript {
  repositories {
    maven {
      url "${nexusUrl}/content/groups/public"
    }
    jcenter() // needed because gradle-vagrant-plugin can't be found on any public repos that work with nexus...
  }
  dependencies { 
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.2.0.RELEASE'
    classpath 'com.bmuschko:gradle-vagrant-plugin:2.0'
    classpath "com.netflix.nebula:gradle-ospackage-plugin:2.2.6"
  }
}

repositories { 
  maven {
    url "${nexusUrl}/content/groups/public"
  }
  // jcenter()
}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integration-test/java')
    }
    resources.srcDir file('src/integration-test/resources')
  }
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
  // long form: compile group: "org.springframework.boot", name: "spring-boot-starter-actuator", version: "..."
  compile "org.springframework.boot:spring-boot-starter-actuator:1.2.0.RELEASE"
  compile "org.springframework.boot:spring-boot-starter-web:1.2.0.RELEASE"
  compile "org.springframework.boot:spring-boot-starter-data-jpa:1.2.0.RELEASE"
  compile 'com.h2database:h2:1.4.184'
  compile 'log4j:log4j:1.2.17'
  testCompile 'junit:junit:4.11'
  testCompile 'org.springframework:spring-test:2.5'
  testCompile 'org.assertj:assertj-core:3.0.0'
  testCompile "org.springframework.boot:spring-boot-starter-test:1.2.0.RELEASE" 
  integrationTestCompile "org.springframework.boot:spring-boot-starter-test" 
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "${nexusUrl}/content/repositories/releases") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
            // pom.packaging = 'deb'
            snapshotRepository(url: "${nexusUrl}/content/repositories/snapshots") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
        }
    }
}

def customerPackageFile = file('./build/distributions/customer_' + project.version + '-1_i386.deb')

artifacts {
    // archives customerPackageFile
    archives(customerPackageFile) {
        name 'customer'
        type 'deb'
        classifier 'all'
         builtBy buildDeb
    }
}


// task is buildDeb
ospackage {
    packageName = project.name
    version = project.version
    release '1'
    arch = I386
    os = LINUX

    // installUtils file('scripts/rpm/utils.sh')
    // preInstall file('scripts/rpm/preInstall.sh')
    // postInstall file('scripts/rpm/postInstall.sh')
    // preUninstall 'touch /tmp/myfile'
    // postUninstall file('scripts/rpm/postUninstall.sh')

    // requires('qux')

    into '/opt/springboot-microservice-demo/customer'

    from(jar.outputs.files) {
        into 'bin'
    }
    from(configurations.runtime) {
        into 'lib'
    }
    from('lib') {
        into 'lib'
    }
    // from('scripts') {
    //     into 'bin'
    //     exclude 'database'
    //     fileMode = 0550
    // }
    from('src/main/resources') {
        fileType CONFIG | NOREPLACE
        into 'conf'
    }
}

buildDeb {
//    requires('bat', '1.0.1')
//     link('/etc/init.d/foo', '/opt/foo/bin/foo.upstart')
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}

vagrant {
    provider = "google"

    environmentVariables {
      // The Vagrantfile needs to know the version of the app being deployed/tested, and this is passed as an environment variable 'CUSTOMER_VERSION'
      variable 'CUSTOMER_VERSION', project.version
    }

    installation {
        validate = true
    }
}

task devIntegrationTest(type: Test) {
    description = 'Performs dev integration testing against the server "test.host" and port "test.port"'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false } // Tell Gradle that the outputs of the integrationTest task should always be considered out of date so it is always executed.
    systemProperties['test.host'] = System.getProperty("test.host", "dev-microservices-demo")
    systemProperties['test.port'] = System.getProperty("test.port", "8080")
}

task sqiIntegrationTest(type: Test) {
    description = 'Performs SQI integration testing against the server "test.host" and port "test.port"'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false } // Tell Gradle that the outputs of the integrationTest task should always be considered out of date so it is always executed.
    systemProperties['test.host'] = System.getProperty("test.host", "sqi-microservices-demo")
    systemProperties['test.port'] = System.getProperty("test.port", "8080")
}

task uatIntegrationTest(type: Test) {
    description = 'Performs UAT integration testing against the server "test.host" and port "test.port"'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false } // Tell Gradle that the outputs of the integrationTest task should always be considered out of date so it is always executed.
    systemProperties['test.host'] = System.getProperty("test.host", "uat-microservices-demo")
    systemProperties['test.port'] = System.getProperty("test.port", "8080")
}

task svtIntegrationTest(type: Test) {
    description = 'Performs SVT integration testing against the server "test.host" and port "test.port"'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false } // Tell Gradle that the outputs of the integrationTest task should always be considered out of date so it is always executed.
    systemProperties['test.host'] = System.getProperty("test.host", "svt-microservices-demo")
    systemProperties['test.port'] = System.getProperty("test.port", "8080")
}

task prodIntegrationTest(type: Test) {
    description = 'Performs prod integration testing against the server "test.host" and port "test.port"'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false } // Tell Gradle that the outputs of the integrationTest task should always be considered out of date so it is always executed.
    systemProperties['test.host'] = System.getProperty("test.host", "prod-microservices-demo")
    systemProperties['test.port'] = System.getProperty("test.port", "8080")
}

import com.bmuschko.gradle.vagrant.tasks.VagrantUp
import com.bmuschko.gradle.vagrant.tasks.VagrantHalt
import com.bmuschko.gradle.vagrant.tasks.VagrantDestroy

task devDeploy(type: VagrantUp) {
    description = 'Starts a dev integration testing VM running on Google Cloud Engine and deploys the customer microservices app on it.'
    group = 'Google Cloud Engine VM'
    boxDir = file('../env/dev')
}

task devHalt(type: VagrantHalt) {
    description = 'Stops a dev integration testing VM running on Google Cloud Engine.'
    group = 'Google Cloud Engine VM'
    boxDir = file('../env/dev')
}

task devDestroy(type: VagrantDestroy) {
    description = 'Destroys a dev integration testing VM running on Google Cloud Engine.'
    group = 'Google Cloud Engine VM'
    boxDir = file('../env/dev')
}

task sqiDeploy(type: VagrantUp) {
    description = 'Starts an SQI testing VM running on Google Cloud Engine and deploys the customer microservices app on it.'
    group = 'Google Cloud Engine VM'
    boxDir = file('../env/sqi')
}

task sqiHalt(type: VagrantHalt) {
    description = 'Stops an SQI testing VM running on Google Cloud Engine.'
    group = 'Google Cloud Engine VM'
    boxDir = file('../env/sqi')
}

task sqiDestroy(type: VagrantDestroy) {
    description = 'Destroys an SQI testing VM running on Google Cloud Engine.'
    group = 'Google Cloud Engine VM'
    boxDir = file('../env/sqi')
}

task uatDeploy(type: VagrantUp) {
    description = 'Starts a UAT testing VM running on Google Cloud Engine and deploys the customer microservices app on it.'
    group = 'Google Cloud Engine VM'
    boxDir = file('../env/uat')
}

task svtDeploy(type: VagrantUp) {
    description = 'Starts an SVT testing VM running on Google Cloud Engine and deploys the customer microservices app on it.'
    group = 'Google Cloud Engine VM'
    boxDir = file('../env/svt')
}

task prodDeploy(type: VagrantUp) {
    description = 'Starts the production VM running on Google Cloud Engine and deploys the customer microservices app on it.'
    group = 'Google Cloud Engine VM'
    boxDir = file('../env/prod')
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}
